/* Copyright (c) 2006-2011 Regents of the University of Minnesota.
   For licensing terms, see the file LICENSE.
 */

package com.citizensense.android.net;

import java.io.IOException;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpResponseException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.util.EntityUtils;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import android.util.Log;

import com.citizensense.android.conf.Constants;

/**
 * Handle an HttpResponse as a XML Object. This code is based, in part, 
 * on BasicResponseHandler.
 * @author Phil Brown
 * @see <a href=http://www.java2s.com/Open-Source/Android/android-platform-external/apache-http/org/apache/http/impl/client/BasicResponseHandler.java.htm>
 BasicResponseHandler</a>
 */
public class XMLResponseHandler implements ResponseHandler<Document> {

	/** The XML {@link Document} generated by this handler*/
	private Document document;
	/** This handler's callback. This is run when this handler completes its
	 * task of parsing the {@link HttpResponse} */
	private Callback<?> callback;
	
	/**
	 * Constructs a new XMLResponseHandler
	 */
	public XMLResponseHandler() {
		this(null);
	}//XMLResponseHandler
	
	/**
	 * Constructs a new XMLResponseHandler with the given callback
	 * @param callback
	 */
	public XMLResponseHandler(Callback<?> callback) {
		this.callback = callback;
		this.document = null;
	}//XMLResponseHandler
	
	/** Set the {@link Callback} for this handler. This is useful because it
	 * allows the calling class to get the returned {@link Document}. */
	public void setCallback(Callback<?> callback) {
		this.callback = callback;
	}//setCallback
	
	@Override
	public Document handleResponse(HttpResponse response)
			throws ClientProtocolException, IOException {
		StatusLine statusLine = response.getStatusLine();
		if (Constants.DEBUG) {
			Log.d("Request", "Response Code: " + statusLine.getStatusCode() + " " + statusLine.getReasonPhrase());
		}
        if (statusLine.getStatusCode() >= 300) {
            throw new HttpResponseException(statusLine.getStatusCode(),
                    statusLine.getReasonPhrase());
            
        }

        HttpEntity entity = response.getEntity();
        if (entity == null) {
        	return null;
        }
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try {
			if (this.callback != null) {
				if (this.callback instanceof DocumentCallback) {
					((DocumentCallback) callback).invoke(factory.newDocumentBuilder().parse(entity.getContent()));
				}
				else if (this.callback instanceof StringCallback) {
					((StringCallback) callback).invoke(EntityUtils.toString(entity));
				}
				else {
					//invalid callback
				}
			}
			return this.document;
		} catch (ParserConfigurationException e1) {
			e1.printStackTrace();
			return null;
		} catch (IllegalStateException e) {
			e.printStackTrace();
			return null;
		} catch (SAXException e) {
			e.printStackTrace();
			return null;
		}
	}//handleResponse
	
	/** Callback for this {@link XMLResponseHandler} */
	public interface Callback<T extends Object> {
		/** Invoke the callback, passing in the parsed XML as a {@link T} */
		public void invoke(T xml);
	}//Callback
	
	/**
	 * Used to return an XML document, which can be used with the DOM parser.
	 */
	public interface DocumentCallback extends Callback<Document> {
		/** 
		 * Invoke the callback, passing in the {@link Document} that the 
		 * handler has finished receiving and parsing.
		 */
		@Override
		public void invoke(Document doc);
	}//DocumentCallback
	
	/** 
	 * Used to return an XML String, which can be used with the SAX parser.
	 */
	public interface StringCallback extends Callback<String>{
		/** 
		 * Invoke the callback, passing in the XML (as a String) that the 
		 * handler has finished receiving and parsing.
		 */
		@Override
		public void invoke(String xml);
	}//StringCallback

}//XMLResponseHandler
